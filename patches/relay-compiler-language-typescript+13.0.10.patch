diff --git a/node_modules/relay-compiler-language-typescript/lib/formatGeneratedModule.js b/node_modules/relay-compiler-language-typescript/lib/formatGeneratedModule.js
index 22c9e4b..913c6fe 100644
--- a/node_modules/relay-compiler-language-typescript/lib/formatGeneratedModule.js
+++ b/node_modules/relay-compiler-language-typescript/lib/formatGeneratedModule.js
@@ -2,6 +2,37 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.formatterFactory = void 0;
 var addAnyTypeCast_1 = require("./addAnyTypeCast");
+
+const createRequireRegex = () => /require\('(.*)'\)/g;
+const escapeRegexString = (str) =>
+  str.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
+
+  // collects all require calls and converts them to top level imports
+const requireToImport = (content) => {
+    const requirePaths = new Set();
+    const regex = createRequireRegex();
+    let result = null;
+    while (true) {
+      result = regex.exec(content);
+      if (result === null) {
+        break;
+      }
+      requirePaths.add(result[1]);
+    }
+  
+    for (const requirePath of requirePaths) {
+      const [baseName] = requirePath.replace("./", "").split(".");
+      content =
+        `import ${baseName} from "${requirePath.replace(".ts", "")}";\n` +
+        content.replace(
+          new RegExp(escapeRegexString(`require('${requirePath}')`), "g"),
+          baseName
+        );
+    }
+  
+    return content;
+  };
+
 var formatterFactory = function (compilerOptions) {
     if (compilerOptions === void 0) { compilerOptions = {}; }
     return function (_a) {
@@ -10,12 +41,27 @@ var formatterFactory = function (compilerOptions) {
             ? "import { " + documentType + " } from \"relay-runtime\";"
             : "";
         var docTextComment = docText ? "\n/*\n" + docText.trim() + "\n*/\n" : "";
-        var nodeStatement = "const node: " + (documentType ||
-            "never") + " = " + concreteText + ";";
+        let nodeStatement = `const node: ${
+        documentType || "never"
+        } = ${concreteText};`;
         if (compilerOptions.noImplicitAny) {
             nodeStatement = addAnyTypeCast_1.default(nodeStatement).trim();
         }
-        return "/* tslint:disable */\n/* eslint-disable */\n// @ts-nocheck\n" + (hash ? "/* " + hash + " */\n" : "") + "\n" + documentTypeImport + "\n" + (typeText || "") + "\n\n" + docTextComment + "\n" + nodeStatement + "\n(node as any).hash = '" + sourceHash + "';\nexport default node;\n";
+
+        const rawContent = `${typeText || ""}
+${docTextComment}
+${nodeStatement}
+(node as any).hash = '${sourceHash}';
+export default node;
+`;
+
+        const content = `/* tslint:disable */
+/* eslint-disable */
+// @ts-nocheck
+${hash ? `/* ${hash} */\n` : ""}
+${documentTypeImport}
+${requireToImport(rawContent)}`;
+        return content;
     };
 };
 exports.formatterFactory = formatterFactory;
